{"version":3,"sources":["components/Note.js","components/Notification.js","services/notes.js","App.js","index.js"],"names":["Note","_ref","note","toggleImportance","label","important","react_default","a","createElement","className","content","onClick","Notification","message","services_notes","request","axios","get","nonExisting","id","date","then","response","data","concat","newObject","post","put","Footer","style","color","fontStyle","fontSize","App","props","_useState","useState","_useState2","Object","slicedToArray","notes","setNotes","_useState3","_useState4","newNote","setNewNote","_useState5","_useState6","showAll","setShowAll","_useState7","_useState8","errorMessage","setErrorMessage","useEffect","noteService","intialNotes","notesToShow","filter","Fragment","components_Notification","map","components_Note","key","find","n","changedNote","objectSpread","console","log","returnedNote","catch","error","setTimeout","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","Date","toISOString","Math","random","value","onChange","target","type","App_Footer","ReactDOM","createRoot","document","getElementById","render","src_App"],"mappings":"6MAaeA,EAXF,SAAHC,GAAmC,IAA7BC,EAAID,EAAJC,KAAMC,EAAgBF,EAAhBE,iBACZC,EAAQF,EAAKG,UAAY,qBAAuB,iBAEtD,OACIC,EAAAC,EAAAC,cAAA,MAAIC,UAAU,QACTP,EAAKQ,QACNJ,EAAAC,EAAAC,cAAA,UAAQG,QAASR,GAAmBC,KCM/BQ,EAZI,SAAHX,GAAoB,IAAdY,EAAOZ,EAAPY,QACpB,OAAgB,OAAZA,EACK,KAIPP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACZI,oBCiCMC,EAtBA,WACX,IAAMC,EAAUC,IAAMC,IAjBV,cAkBNC,EAAc,CAClBC,GAAI,IACJT,QAAS,mCACTU,KAAM,2BACNf,WAAW,GAEb,OAAOU,EAAQM,KAAK,SAAAC,GAAQ,OACvBA,EAASC,KAAKC,OAAON,MAafJ,EAVA,SAAAW,GAEX,OADgBT,IAAMU,KA7BV,aA6BwBD,GACrBJ,KAAK,SAAAC,GAAQ,OAAIA,EAASC,QAQ9BT,EALA,SAACK,EAAIM,GAEhB,OADgBT,IAAMW,IAAG,GAAAH,OAlCb,aAkCwB,KAAAA,OAAIL,GAAMM,GAC/BJ,KAAK,SAAAC,GAAQ,OAAIA,EAASC,QClCvCK,EAAS,WAOb,OACEtB,EAAAC,EAAAC,cAAA,OAAKqB,MAPa,CAClBC,MAAO,QACPC,UAAW,SACXC,SAAU,KAKR1B,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,qFAwHSyB,EAnHH,SAACC,GAAU,IAAAC,EACKC,mBAAS,IAAGC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAA/BK,EAAKH,EAAA,GAAEI,EAAQJ,EAAA,GAAAK,EACQN,mBAAS,IAAGO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAAnCE,EAAOD,EAAA,GAAEE,EAAUF,EAAA,GAAiBG,EACbV,oBAAS,GAAKW,EAAAT,OAAAC,EAAA,EAAAD,CAAAQ,EAAA,GAArCE,EAAOD,EAAA,GAAEE,EAAUF,EAAA,GAAAG,EACcd,mBAAS,MAAKe,EAAAb,OAAAC,EAAA,EAAAD,CAAAY,EAAA,GAA/CE,EAAYD,EAAA,GAAEE,EAAeF,EAAA,GAEpCG,oBAAU,WACRC,IAGClC,KAAK,SAAAmC,GACJf,EAASe,MAEV,IAUH,IA0DMC,EAAcT,EACjBR,EACAA,EAAMkB,OAAO,SAAAxD,GAAI,OAAIA,EAAKG,YAG7B,OACAC,EAAAC,EAAAC,cAAAF,EAAAC,EAAAoD,SAAA,KACErD,EAAAC,EAAAC,cAAA,mBACAF,EAAAC,EAAAC,cAACoD,EAAY,CAAC/C,QAASuC,IACvB9C,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAQG,QAAS,kBAAMsC,GAAYD,KAAS,QACpCA,EAAU,YAAc,QAGlC1C,EAAAC,EAAAC,cAAA,UACKiD,EAAYI,IAAI,SAAA3D,GAAI,OACrBI,EAAAC,EAAAC,cAACsD,EAAI,CAACC,IAAK7D,EAAKiB,GACfjB,KAAMA,EACNC,iBAAkB,kBA5EE,SAAAgB,GAExB,IAAMjB,EAAOsC,EAAMwB,KAAK,SAAAC,GAAC,OAAIA,EAAE9C,KAAOA,IAKhC+C,EAAW5B,OAAA6B,EAAA,EAAA7B,CAAA,GAAQpC,EAAI,CAAEG,WAAYH,EAAKG,YAChD+D,QAAQC,IAAIH,GAEZX,EACQpC,EAAI+C,GACX7C,KAAK,SAAAiD,GAGL7B,EAASD,EAAMqB,IAAI,SAAA3D,GAAI,OAAIA,EAAKiB,KAAOA,EAAKjB,EAAOoE,OAEnDC,MAAM,SAAAC,GACNnB,EAAe,SAAA7B,OACJtB,EAAKQ,QAAO,sCAErB+D,WAAW,WACTpB,EAAgB,OACf,KACHZ,EAASD,EAAMkB,OAAO,SAAAO,GAAC,OAAIA,EAAE9C,KAAOA,OAoDXuD,CAAmBxE,EAAKiB,UAIrDb,EAAAC,EAAAC,cAAA,QAAMmE,SA/CQ,SAAAC,GACdA,EAAMC,iBACN,IAAMC,EAAa,CACjBpE,QAASkC,EACTxB,MAAM,IAAI2D,MAAOC,cAEjB3E,UAAW4E,KAAKC,SAAW,IAI7B3B,EACQuB,GACPzD,KAAK,SAAAiD,GACJ7B,EAASD,EAAMhB,OAAO8C,IACtBzB,EAAW,QAmCXvC,EAAAC,EAAAC,cAAA,SAAO2E,MAAOvC,EACdwC,SAvDqB,SAAAR,GACvB/B,EAAW+B,EAAMS,OAAOF,UAwDtB7E,EAAAC,EAAAC,cAAA,UAAQ8E,KAAK,UAAQ,SAEvBhF,EAAAC,EAAAC,cAAC+E,EAAM,cC5HXC,IAASC,WAAWC,SAASC,eAAe,SAC3CC,OAAOtF,EAAAC,EAAAC,cAACqF,EAAG","file":"static/js/main.6d95addf.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Note = ({ note, toggleImportance }) => {\r\n    const label = note.important ? 'make not important' : 'make important'\r\n    \r\n    return (\r\n        <li className=\"note\">\r\n            {note.content} \r\n            <button onClick={toggleImportance}>{label}</button>\r\n        </li>\r\n    )\r\n} \r\n\r\nexport default Note","import React from 'react'\r\n\r\nconst Notification = ({ message }) => {\r\n    if (message === null) {\r\n      return null\r\n    }\r\n  \r\n    return (\r\n      <div className=\"error\">\r\n        {message}\r\n      </div>\r\n    )\r\n  }\r\n  \r\n  export default Notification","import axios from 'axios'\r\n// const baseUrl = 'http://localhost:3001/notes'\r\n// const baseUrl = 'http://localhost:3001/api/notes'\r\n// const baseUrl = ' https://shielded-springs-25528.herokuapp.com/api/notes'\r\nconst baseUrl = '/api/notes'\r\n\r\n// const getAll = () => {\r\n//     const request = axios.get(baseUrl)\r\n//     return request.then(response => {\r\n//         console.log(response.data);\r\n//         return response.data\r\n//     })\r\n// }\r\n\r\n/* a more compact expression of the above */\r\n// const getAll = () => {\r\n//     const request = axios.get(baseUrl)\r\n//     return request.then(response => response.data)\r\n// }\r\n\r\nconst getAll = () => {\r\n    const request = axios.get(baseUrl)\r\n    const nonExisting = {\r\n      id: 10000,\r\n      content: 'This note is not saved to server',\r\n      date: '2019-05-30T17:30:31.098Z',\r\n      important: true,\r\n    }\r\n    return request.then(response =>\r\n         response.data.concat(nonExisting)) \r\n}\r\n\r\nconst create = newObject => {\r\n    const request = axios.post(baseUrl, newObject)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nexport default { getAll, create, update }","import React, { useState, useEffect } from 'react'\nimport Note from './components/Note'\nimport Notification from './components/Notification'\nimport noteService from './services/notes'\n\nconst Footer = () => {\n  const footerStyle = {\n    color: 'green',\n    fontStyle: 'italic',\n    fontSize: 16\n  }\n\n  return (\n    <div style={footerStyle}>\n      <br />\n      <em>Note app, Department of Computer Science, University of Helsinki 2022</em>\n    </div>\n  )\n}\n\nconst App = (props) => {\n  const [notes, setNotes] = useState([])\n  const [newNote, setNewNote] = useState('') // input state \n  const [showAll, setShowAll] = useState(true)\n  const [errorMessage, setErrorMessage] = useState(null)\n\n  useEffect(() => {\n    noteService\n    .getAll()\n    // event handler\n    .then(intialNotes => {\n      setNotes(intialNotes)\n    })\n  }, [])\n\n  // useEffect(() => {\n  //   axios\n  //   .get('http://localhost:3001/notes')\n  //   .then(response => {\n  //     setNotes(response.data)\n  //   })\n  // }, [])\n\n  const toggleImportanceOf = id => {\n     // find method returns the first matching note (obj)\n     const note = notes.find(n => n.id === id)\n\n     /* ...note creates a copy of the note obj. \n     Since note is a reference to the notes array in the comp state,\n     never mutate state directly in the state. */ \n     const changedNote = { ...note, important: !note.important }\n     console.log(changedNote);\n     \n     noteService\n     .update(id, changedNote)\n     .then(returnedNote => { // returns the updated obj\n      /* create a new array with the updated obj\n      &  update the setNotes state */\n      setNotes(notes.map(note => note.id !== id ? note : returnedNote))\n     })\n     .catch(error => {\n      setErrorMessage(\n        `Note '${note.content}' was already removed from server`\n        )\n        setTimeout(() => {\n          setErrorMessage(null)\n        }, 5000)\n        setNotes(notes.filter(n => n.id !== id))\n     })\n    }\n  \n  const handleNoteChange = event => {\n    setNewNote(event.target.value)\n  }\n\n  // event handlers\n  const addNote = event => {\n    event.preventDefault() // disables form submission (no page reload) \n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      // date: new Date(),\n      important: Math.random() < 0.5, // returns a bool value\n      // id: notes.length + 1,\n    }\n\n    noteService\n    .create(noteObject)\n    .then(returnedNote => {\n      setNotes(notes.concat(returnedNote))\n      setNewNote('')\n    })\n    // .catch(_ => {\n    //   alert(\n    //     `The note '${note.content}' was already deleted from the server`\n    //     )\n    //  })\n  }\n\n  /* if showAll showAll is true, display all the notes\n  else, display notes with important is true */\n  const notesToShow = showAll\n   ? notes \n   : notes.filter(note => note.important)\n\n  \n  return (\n  <>\n    <h1>Notes</h1>\n    <Notification message={errorMessage} />\n    <div>\n      <button onClick={() => setShowAll(!showAll)}>\n        show {showAll ? 'important' : 'all'}\n      </button>\n    </div>\n    <ul>\n        {notesToShow.map(note => \n        <Note key={note.id}\n         note={note}\n         toggleImportance={() => toggleImportanceOf(note.id)}\n        />\n      )}\n    </ul>\n    <form onSubmit={addNote}>\n      {/* value attribute denotes the default value of the input element */}\n      <input value={newNote}\n      onChange={handleNoteChange}\n     />\n      <button type=\"submit\">save</button>\n    </form>\n    <Footer />\n  </>\n  )\n}\n\nexport default App;\n\n {/* the following way to use array indexes as\n       keys is NOT recommended */}\n      {/* {notes.map((note, index) => {\n        console.log(index);\n        return (\n        <li key={index}>\n         {note.content}\n        </li>\n        )}\n      )} */}\n","import React from 'react'\nimport ReactDOM from 'react-dom/client'\nimport App from './App'\nimport './index.css'\n\n\nReactDOM.createRoot(document.getElementById('root'))\n.render(<App />)"],"sourceRoot":""}